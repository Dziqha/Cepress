---
export interface Props {
  code: string;
  language?: string;
  title?: string;
}

const { code, language = 'bash', title } = Astro.props;
---

<div class="my-6 sm:my-8 w-full">
  <div class="bg-gray-800 dark:bg-gray-900 text-sm rounded-xl overflow-hidden shadow border border-gray-700">
    {title && (
      <div class="flex justify-between items-center px-4 py-2 border-b border-gray-700">
        <span class="text-gray-200 truncate">{title}</span>
        <button
          class="copy-btn px-2 py-1 rounded text-gray-400 hover:text-white hover:bg-gray-700 text-xs transition"
          data-code={code}
          tabindex="0"
        >
          <svg class="w-4 h-4 inline-block" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
              d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
          </svg>
          <span class="copy-text hidden sm:inline ml-1">Copy</span>
        </button>
      </div>
    )}
    <div class="overflow-x-auto">
      <pre class="p-4 text-xs sm:text-sm leading-relaxed"><code class={`language-${language} text-gray-100`}>{code}</code></pre>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const copyButtons = document.querySelectorAll('.copy-btn');

    copyButtons.forEach(button => {
      const copyText = button.querySelector('.copy-text');
      const code = button.getAttribute('data-code') ?? '';

      const handleCopy = async () => {
        try {
          await navigator.clipboard.writeText(code);
          const originalText = copyText?.textContent ?? '';
          if (copyText) copyText.textContent = 'Copied!';
          button.classList.add('text-green-400');

          setTimeout(() => {
            if (copyText) copyText.textContent = originalText;
            button.classList.remove('text-green-400');
          }, 2000);
        } catch (err) {
          console.error('Copy failed:', err);
        }
      };

      button.addEventListener('click', handleCopy);

      button.addEventListener('keydown', (e) => {
        const ke = e as KeyboardEvent;
        if (ke.key === 'Enter' || ke.key === ' ') {
          e.preventDefault();
          handleCopy();
        }
      });
    });
  });
</script>
