---
export interface Props {
  code: string;
  language?: string;
  title?: string;
}

const { code, language = 'bash', title } = Astro.props;
---

<div class="relative group my-6">
  {title && (
    <div class="flex items-center justify-between bg-gray-800 dark:bg-gray-900 px-4 py-3 rounded-t-xl border-b border-gray-700">
      <div class="flex items-center space-x-2">
        <div class="flex space-x-1">
          <div class="w-3 h-3 bg-red-500 rounded-full"></div>
          <div class="w-3 h-3 bg-yellow-500 rounded-full"></div>
          <div class="w-3 h-3 bg-green-500 rounded-full"></div>
        </div>
        <span class="text-sm font-medium text-gray-200 ml-3">{title}</span>
      </div>
      <button 
        class="copy-btn flex items-center space-x-2 px-3 py-1 text-gray-400 hover:text-white hover:bg-gray-700 rounded-md transition-all duration-200 text-sm"
        data-code={JSON.stringify(code)}
      >
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
        </svg>
        <span class="copy-text">Copy</span>
      </button>
    </div>
  )}
  <div class={`bg-gray-900 dark:bg-black ${title ? 'rounded-b-xl' : 'rounded-xl'} overflow-hidden shadow-lg`}>
    <div class="overflow-x-auto">
      <pre class="p-4 text-sm leading-relaxed"><code class={`language-${language} text-gray-100`}>{code}</code></pre>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const copyButtons = document.querySelectorAll('.copy-btn');
    
    copyButtons.forEach(button => {
      button.addEventListener('click', async () => {
        const codeData = button.getAttribute('data-code');
        const copyText = button.querySelector('.copy-text');
        
        if (codeData && copyText) {
          try {
            const code = JSON.parse(codeData);
            await navigator.clipboard.writeText(code);
            
            const originalText = copyText.textContent;
            copyText.textContent = 'Copied!';
            button.classList.add('text-green-400');
            
            setTimeout(() => {
              copyText.textContent = originalText;
              button.classList.remove('text-green-400');
            }, 2000);
          } catch (err) {
            console.error('Failed to copy code:', err);
            copyText.textContent = 'Failed';
            setTimeout(() => {
              copyText.textContent = 'Copy';
            }, 2000);
          }
        }
      });
    });
  });
</script>